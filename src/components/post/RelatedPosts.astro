---
import { getCollection } from "astro:content";
import PostDate from "./PostDate.astro";
import ReadTime from "./ReadTime.astro";

interface Props {
  currentPostId: string;
  currentTags: string[];
  limit?: number;
}

const { currentPostId, currentTags, limit = 3 } = Astro.props;

// Get all blog posts
const allPosts = await getCollection("blog");

// Filter out current post and get published posts only
const otherPosts = allPosts.filter(
  (post) => post.id !== currentPostId && post.data.isPublished
);

// Calculate similarity score based on matching tags
const postsWithScore = otherPosts.map((post) => {
  const matchingTags = post.data.tags.filter((tag: string) =>
    currentTags.includes(tag)
  );
  return {
    post,
    score: matchingTags.length,
  };
});

// Sort by score (most matching tags first), then by date (newest first)
const relatedPosts = postsWithScore
  .sort((a, b) => {
    if (a.score !== b.score) {
      return b.score - a.score;
    }
    return new Date(b.post.data.date).getTime() - new Date(a.post.data.date).getTime();
  })
  .slice(0, limit)
  .map((item) => item.post);
---

{
  relatedPosts.length > 0 && (
    <section class="mt-16 mb-9">
      <h2 class="text-2xl font-bold mb-6 text-gray-900">
        Related Posts
      </h2>
      <ul class="space-y-2">
        {relatedPosts.map((relatedPost) => (
          <li class="mb-2">
            <a href={`/${relatedPost.id}`} class="ml-2 text-xl hover:text-primary-500 hover:underline"> {relatedPost.data.title}</a>
          </li>
        ))}
      </ul>
    </section>
  )
}

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
